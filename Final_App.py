import streamlit as st
import pandas as pd
import joblib
import numpy as np
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

#BACK-END

# D√©finition de la classe de transformation personnalis√©e
class CustomTransform(BaseEstimator, TransformerMixin):
    def __init__(self, constante):
        self.constante = 20000

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        X = X.copy()
        X['Solde_Compte_shefted'] = X['Solde_Compte'] + self.constante

        for col in ['Solde_Compte_shefted', 'Dur√©e_Appel', 'Nombre_Contacts_Campagne', 'Jours_Dernier_Contact', 'Nombre_Contacts_Pr√©c√©dents']:
            X[f'{col}_log'] = np.log1p(X[col].astype(float))

        X = X.drop(columns=['Solde_Compte_shefted', 'Dur√©e_Appel', 'Nombre_Contacts_Campagne', 'Jours_Dernier_Contact', 'Nombre_Contacts_Pr√©c√©dents'])
        return X

#Chargement du mod√®le
model = joblib.load('modele_pipeline.pkl')

#D√©finition de la fonction de g√©n√©ration de recommandations
def generate_recommendations(cluster):
    if cluster == 0:
        cluster_characteristics = 'Des Individus g√©n√©ralement plus √¢g√©s, avec des soldes de compte plus bas, un nombre de contacts lors des campagne plus √©lev√©. Majoritairement des personnes mari√©es et employ√©es dans des r√¥les administratifs.'
        recommendations = {
            'Offre ou Service': 'Proposez des produits financiers adapt√©s aux personnes √¢g√©es avec des soldes de compte plus bas, tels que des plans d\'√©pargne ou des pr√™ts personnels √† taux r√©duit.',
            'Strat√©gies de Communication': 'Utilisez des canaux de communication traditionnels, tels que le t√©l√©phone et le courrier postal. Les messages doivent √™tre clairs et faciles √† comprendre.',
            'Campagnes Cibl√©es': 'Planifiez les campagnes de contact plus t√¥t dans le mois, en utilisant des appels t√©l√©phoniques personnalis√©s.'
        }
    elif cluster == 1:
        cluster_characteristics = 'Groupe d\'ndividus g√©n√©ralement avec une √©ducation tertiaire et re√ßevant des contacts cellulaires fr√©quents lors des compagnes. Les contacts sont souvent pendant le mois de mai.'
        recommendations = {
            'Offre ou Service': 'Offrez des produits et services li√©s √† l\'√©ducation continue et √† l\'avancement de carri√®re, tels que des pr√™ts √©tudiants ou des services de d√©veloppement professionnel.',
            'Strat√©gies de Communication': 'Utilisez des canaux num√©riques, tels que les SMS, les applications mobiles et les emails. Les messages doivent √™tre informatifs et ax√©s sur le d√©veloppement personnel.',
            'Campagnes Cibl√©es': 'Planifiez des campagnes intensives pendant le mois de mai, offrant des promotions sp√©ciales ou des r√©ductions pour les services √©ducatifs.'
        }
    elif cluster == 2:
        cluster_characteristics = 'Un groupe avec une grande variation d\'√¢ge, de soldes de compte vari√©s avec des contacts pour la plus part au debut de mois lors des compagne.'
        recommendations = {
            'Offre ou Service': 'Proposez une gamme vari√©e de produits financiers et de services pour r√©pondre aux besoins diversifi√©s de ce groupe, allant des produits d\'√©pargne √† des investissements.',
            'Strat√©gies de Communication': 'Utilisez une combinaison de canaux de communication traditionnels et num√©riques avec des message personnalis√©s en fonction des besoins sp√©cifiques.',
            'Campagnes Cibl√©es': 'Planifiez les campagnes et contact au debut des mois, en utilisant une approche multicanal pour maximiser la port√©e.'
        }
    elif cluster == 3:
        cluster_characteristics = 'Groupe des jeunes avec une √©ducation secondaire pour la plus part avec des contacts vers la fin du mois et un taux de succ√®s g√©n√©ralement plus √©lev√© dans les campagnes pr√©c√©dentes.'
        recommendations = {
            'Offre ou Service': 'Offrez des produits et services adapt√©s aux jeunes adultes, tels que des comptes d\'√©pargne √† haut rendement, des pr√™ts √©tudiants et des conseils financiers pour les jeunes travailleurs.',
            'Strat√©gies de Communication': 'Utilisez principalement des canaux num√©riques, tels que les r√©seaux sociaux, les applications mobiles et les emails. Les messages doivent √™tre dynamiques et interactifs.',
            'Campagnes Cibl√©es': 'Planifiez les campagnes de contact plus tard dans le mois, en utilisant des offres sp√©ciales et des promotions pour attirer l\'attention des jeunes adultes.'
        }
    return cluster_characteristics, recommendations

# Fonction de pr√©diction
def predict_cluster(data, model):
    data_transformed = model.named_steps['custom_transform'].transform(data)
    data_preprocessed = model.named_steps['preprocessor'].transform(data_transformed)
    data_pca = model.named_steps['pca'].transform(data_preprocessed)
    cluster = model.named_steps['kmeans'].predict(data_pca)
    return cluster[0]

#FRONT-END

# Interface utilisateur avec Streamlit
st.title("Syst√®me de Recommandations de Marketing Bancaire Bas√©es sur l'Analyse des Clusters")

# Description du projet
st.write("""
---
üîç **Segmentation de la Client√®le avec le Dataset Bank Marketing** üîç

Je suis Presley Koyaweda, ravi de partager avec vous mon projet de segmentation de client√®le bas√© sur le dataset Bank Marketing.

### üéØ **Objectif**
Identifier des segments de client√®le distincts pour offrir des recommandations personnalis√©es et optimiser les strat√©gies de marketing.

### üöÄ **√âtapes du Projet**
1. Exploration et pr√©paration des donn√©es.
2. Transformation des donn√©es.
3. R√©duction de la dimensionnalit√© avec PCA.
4. Segmentation des clients avec K-Means.
5. D√©veloppement d'un pipeline d'injestion, de transformation, de la reduction de dimention des donn√©es et la prediction de cluster avec des recommandations sp√©cifiques pour chaque segment.

### üìä **R√©sultats**
Quatre segments de client√®le distincts ont √©t√© identifi√©s, chacun avec des besoins et des comportements uniques.
Le nombre de clusters optimal, quatre (4), a √©t√© d√©termin√© en utilisant la m√©thode du coude, confirm√©e par la courbe du score de silhouette.
La valeur moyenne du score de silhouette pour ces clusters est de 0,53, une valeur proche de 1, ce qui sugg√®re que les clusters sont bien d√©finis et distincts les uns des autres.

### üåü **Conclusion**
Ce projet permet de segmenter efficacement les clients et de fournir des recommandations cibl√©es pour am√©liorer les strat√©gies de marketing.
         
---

Tester ce mod√®le en remplissant le formulaire ci-dessous pour obtenir une recommendation de la strat√©gie de marketing.
         
###### Vous devez renseigner tous les champs
               
---
""")

# Entr√©es des caract√©ristiques du client
age = st.number_input('√Çge (18-100 ans)', min_value=18, max_value=100,)
etat_civil = st.selectbox('√âtat Civil (s√©lectionnez)', ['married', 'single', 'divorced'])
profession = st.selectbox('Profession (s√©lectionnez)', ['admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management', 'retired', 'self-employed', 'services', 'student', 'technician', 'unemployed'])
education = st.selectbox('Niveau √âducation (s√©lectionnez)', ['primary', 'secondary', 'tertiary'])
credit_defaillant = st.selectbox('Avoir Cr√©dit D√©faillant (s√©lectionnez)', ['yes', 'no'])
pret_logement = st.selectbox('Avoir Pr√™t Logement (s√©lectionnez)', ['yes', 'no'])
pret_personnel = st.selectbox('Avoir Pr√™t Personnel (s√©lectionnez)', ['yes', 'no'])
solde_compte = st.number_input('Solde Compte (valeur en euros)', )
type_contact = st.selectbox('Type Contact (s√©lectionnez)', ['cellular', 'telephone'])
jour_contact = st.number_input('Jour Contact (1-31)', min_value=1, max_value=31)
mois_contact = st.selectbox('Mois Contact (s√©lectionnez)', ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],)
duree_appel = st.number_input('Dur√©e Appel (en minutes)', value=0)
nombre_contacts_campagne = st.number_input('Nombre Contacts Campagne (valeur enti√®re)', value=0)
jours_dernier_contact = st.number_input('Jours Dernier Contact (valeur enti√®re)', value=0)
nombre_contacts_precedents = st.number_input('Nombre Contacts Pr√©c√©dents (valeur enti√®re)', value=0)
resultat_campagne_precedente = st.selectbox('R√©sultat Campagne Pr√©c√©dente (s√©lectionnez)', ['failure', 'other', 'success'])

# Cr√©√©ation d'un DataFrame avec les donn√©es saisies
data = pd.DataFrame({
    '√Çge': [age],
    '√âtat_Civil': [etat_civil],
    'Profession': [profession],
    'Niveau_√âducation': [education],
    'Avoir_Cr√©dit_D√©faillant': [credit_defaillant],
    'Avoir_Pret_Logement': [pret_logement],
    'Avoir_Pret_Personnel': [pret_personnel],
    'Solde_Compte': [solde_compte],
    'Type_Contact': [type_contact],
    'Jour_Contact': [jour_contact],
    'Mois_Contact': [mois_contact],
    'Dur√©e_Appel': [duree_appel],
    'Nombre_Contacts_Campagne': [nombre_contacts_campagne],
    'Jours_Dernier_Contact': [jours_dernier_contact],
    'Nombre_Contacts_Pr√©c√©dents': [nombre_contacts_precedents],
    'R√©sultat_Campagne_Pr√©c√©dente': [resultat_campagne_precedente],
    'Souscription_D√©p√¥t_Termin√©': ['no']  # Valeur fictive pour le mod√®le
})

#Gestion du remplissage des champs
#missing_fields=[field for field,value in data.items() if value is None]

# Pr√©diction le cluster et g√©n√©rer des recommandations
if st.button('Pr√©dire le Cluster'):
    #if missing_fields:
        #st.warning(f"Veuillez remplir tous les champs suivants : {', '.join(missing_fields)}")
    #else:
    cluster = predict_cluster(data, model)
    cluster_characteristics, recommendations = generate_recommendations(cluster)
    # Ajouter des ic√¥nes et du style
    st.markdown("""
    <div style="display: flex; align-items: center;">
        <span style="font-size: 24px;">üîç</span>
        <span style="margin-left: 10px; font-size: 20px; font-weight: bold;">R√©sultat de pr√©diction du clustering suivi de la recommandation</span>
    </div>
    """, unsafe_allow_html=True)
    st.write(f" **L'individu appartient au cluster :** {cluster}")
    st.write(f" **Caract√©ristiques du cluster :** {cluster_characteristics}")
    st.write(" **Recommandations :** ")
    for key, value in recommendations.items():
            st.write(f"**{key}** : {value}")
